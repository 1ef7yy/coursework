<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAMYAAAAYCAYAAAChr4ICAAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1
        MAAA6mAAADqYAAAXcJy6UTwAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAHdElNRQfoAx8TGCtJ3nJmAAAM
        RklEQVR4Xu3cc9BlyRnH8Y1t2zYqtm0nFduo2BtUWEnFtq2Nbdu2bSe/z2R6qvfkeW/3eWcy2T/2qfrW
        vHtv33PP6e7HfXefyNPDj8Ovw5/C38Lfd/LP8K+Ov4Zfhq+Gt4ZHhCuGY4cD5f8nxw9vC18OXwnfCN8O
        3ws/DD8JPw+/Cr8Jvwt/CH8Mfw5/Cf8InwnHCHtL7h/6/VXxs3D6sNfFBq9uaBYT/Mlwz3C8cKDsfTlx
        +G6o1mcNXwjHDHtLDtCK8eZQ3dB2+Eg4bzhQ9q6cIHwzVGuyhgOiYvB0Zwh7XfakYuCLYU9q+CHCQf/z
        57QcLBx8J3tD3J/7PMiO/9qe+KxruPe1ctzwtVCtxxrWKkZ77u2sEblfqO6jh2Jsdz+ZU/PZ5nXV+rwl
        VDfU+G14SXheeEP4QajG9bw8HDaQw4fTBVp/xnCmjjOH04ZDhl6OFa4dnhz2C9cIm+RE4aqBBXpGeEV4
        9U6eHe4dLhmOFjbJ0YNFcL/uq+G/vX6y0G9c790tvCi4z+eHmwTXmZEjhHOF2wb3+frwyuAZHhxuGHzv
        cn6Wcpwg76vWYg1ylK0Ug5E5eTDPNvTTwkuDe7Yv7JHHhnuES4dNuYrnOVJ4WKjuo0dOe6FgTn1mKzGX
        1uNS4fbhKeGFwXy6P3vC+jwpPCjcMlwkMCqlvCNUN9R4cWgLQ/Nsbl9UjW1I6Npm9uWUiebjFx0e+uuh
        uUqbzsR/LEj+2/Vs+KXQ/nOGJwTWUtGgv4clCgtCPROy1aLdKrjHn+5E0gp/e/1TgRKS6wcJ7vJ7JLHv
        CmcLW8lRwk3Du4Oix/IaDcUPhRGG5nLhUKGSGcWQaL8u2MyvCjb0G4OIgXG0Dx4fGLJeDh0UWGx8ecxo
        nmH9PxFuE2zYpVw4yEs9W/X5HvtAmOj5HhOWnsl+3Dd8ILie766uU2FOvhR8/r8UZKQYDwxLOXVQ+ajG
        N94UKBRLrZpVjYGJvnwgNw481HLMfUMvhwu8gE27HDvCxv1guExYutY7h+ozDc9hg3omil2NaXw6nCos
        5exBwcN9VJ/bCkWO54SThKXMhFLW64TBM7P+jJz1AYWjAMvQk+d+ZmBUqmuO8Iystuv0cqWwrHjOwPo3
        j+2+7xi+H6qxa3lPEBnskpFicOmVcEnV+AZvcJZwsaAcWI1p3CGorPAe1fu9YrBoTwxrN9YS93eL0CvH
        SDHguUfhZ8Om6jebkGB3Qx6WUcjQi2rgVnPX+Hg4cpiVwwThXXWttQi7em/HA814niXCoaYYvPtoX+Fb
        wXrNzPs7w65wW/27GtR4aKjkRqEa33PzcNEweoDHBXF29R6aYnCjDwi7qxQNdf0rhCYziiGk4oKr95bw
        aFw94T0+F6pxDR5JaPPesMmiGnPU0GRGMVxTWENRWVseQh7I+zI2FKE3Eqz6KCzRI+ERPtu9VsHbXTY0
        oRjb8RhCQHtA6Pj5na9twlpdIHhm+aFw0Dzp9cinhFH+dS2hnxCYR98ho6qUBKkSnmDkYsWElwgjxXCj
        mya3KQYlY+mrMT3CHAtW5QBLPhRazjGjGGuw+DcIRCO1GtNj4WxSodGHd75W4bqS/iYafKPQlpK+Jsgz
        hLlvD3Kc9wVeaL9wykBsPsWW6joN98CYEZHBqI8i8W3W3vfcK7iPamyPvaMYIc+8eiDy1hnjJH+z/5ow
        BooLPcI868+bmvtdHl4CVl208ahQicS3ygd6bE4VijUJUcV9AlEIqN5f0pRZhahP4iu49GsFsqcVA67J
        a2hUVe83WFXGponKSjWuobTKcpI90cew0c4diHBCAYQHY/yWWE8FiWZdbThhSHXdBuu8PCExekbo0qvc
        9XLNMBs1mBd7WLFExcozyiUYn1Y5LYWlqC7YEOZUYlI2VVTwssCF7gnFoNkzcaINJpYnEtXvhGpcjxiY
        zCqGyebhZhaHVd0UJjb0f/pqmUapTVGNRf+ckmqxdDVult+H1py10f1NUXnpigsGYRhRZZPDVNdt8PRn
        Db1InquxPf19NRH+rs1ReDjex5wyUooV7w8vCHcJvN7+Kl4jxdBLqITmbVo4cJ/b9Rgsk5tX3WH59T3k
        BNXYHorQKjdiaqFSNa5HSCHuvlP32lYoCZ4nKNsqOVZjehQW1NSr93qEIo/ssGCjeWuhjHuZCRs3Yb6b
        oo1ERYtSCOHOERjPUbjsfRa7l+0qhqroTD9tDUJN/Y1dBYqRYojvKlGyHC3cbI6xREFAWVRS6UYtxPmC
        SarG97DkrbJgs8/EsZTviGFGMZR6W61/pmrDGqmmVO/tLq0wMqMYLKbQyFpYN6GT+XSoUE7m8+a4Fw01
        rymji/EZSSVTYdNHA885ihoavOuyUbtdxWDZhUfV+N3Fmu7ovYwUQ+28Eg2qanzP7QK3u0YxuLfqMKLJ
        GXkoaMK1ig2FkmxW43pYfpMxoxjq3S02fWqoxvTcNbx28VqFaomeka7yDKpz5pYodY9CRvX+6wVWm1GT
        wNr0LD5vrGrWx9wXDzzpzJyr/swoiEpmL9tVDML4KWjsbpi+RIh65TBUDAn0shFGRn0MX6BUZvFmb17c
        eN1Qie64Bag+16PC1ZJStfOZ08NrQikVnOYxGI1qTA+PIdeq3uthEJRMtyNCx1FVSFly9qiKZNeR9eo6
        Pcq1+lyUS3e+GtNDEXqZUQyKKXStxHw5KeG7eTzhYHWNtTgBMKxKOUKwv6QkIraULFbjGyy3pIzlmVUM
        i6veXImKhspG9bkeytN6B8Iw9elqXA/3SdYqxqikCV7zIYvXKtp8ESVDVl0fiGd2ZkpVpUcZWKxNThpG
        G3nTOailzJSWhUaOfDTRzKzG9TiO08uMYjQDu0lEBrymvXbr4HdCSt+MjX1KgddELcLvYR9DfNx7DErC
        SohZq/GNVmKVY8wqhrNMYv1KbBYPW32ux4K13oFDiqMyqecQQ5O1ivHcUI3psXmuEkZlY6FO6yPwAKMq
        k+u1mJ0xGSmGPodKIiWiUDywKpGy+/kDz+4Mk3xF/lBdo8ea9j2CmXzrZqGXGcUA4yy8USVj7OxHPRF7
        sdGL90UA9hJjYF5VskZOoOH7hqGGBpALm1AuU9JDi6uxDR3edthujWJoOikVbiX6DZvOXTVUoliPGYvO
        Cyl3kv+FYvAYvN3Iw1JQTS+LzOqNFElVpnkMijE6M2TeKI9xKmsMhiqfXpQ4XhgiT3Cq2S/5qmsskYxL
        0H2/okQ1pocH7EXFrhpXYT4UCexBpVVGUl/LyWb/2sxCVmEVY66ZeffQi8+NzrgJ5x032bEZqwENA4U4
        JlUFoxrTY8zVQpM1iqEatUkxWACnQqvPLlF1GXk17tV5qSYzFmxtjmHxiWuP+h5q/Z5v5tQpC926tI6D
        74nypfnQXXY0onp/ifG8i/7SaK6x9Bjmvhq3FRRY/uOs2Ey+KYSSg0jUFWQo5qhjbn135KijQ4RrYH3U
        1vvQa41iKAOOElCTsum4xCwsqJCQy22yVjFmwoemGKpe+jrVmLXo77B+TU4RbIJq7BoYQWVyVa/q/U3M
        NDt5wl6ENzMRQKOvUD08VGOW+IwIRhnf39WYBuPSKn17TDGUG68TlvHemuSbpZqpzLCQXOna7mfjR4ES
        LH/fsFYxnhWqMT2u2URn22e2e99wVEPXuRehrmeqxq9BuCKWF1oqBlRjKnz3TOnU/xegF0WcmcOADRu7
        9VqEcJRjto8yQkjtpwi7ZHTGZROshBDLj4WWR6GbUIzZioCy6WzJUudV0ixhn1U8IQorL06tZEYx5C9r
        FMMxk170CnTyhSAz5UUhiq6sIomzRVWPRw9iJvyaQY5BJOUjzyxCcKTbsR/KpPJVjWvwmEvDSRFHvyVp
        CIMUCppIwHXrNaEZ5tl90GCgFDn88rAVPnZJO5hn89JIGihBab9ik6T5b4ma97hsWq5p5YSn5tDyYXuR
        IOqAU56tcKTAvxJVpbc14gyVKpSkS+VludnkPJRHyZRCbLq+SfZbj+X9QW3bvxL05mn0XPRzlmMbrqWR
        Von7VkxQILA45p7Fpggw3zyohNx9t3NJlSiMaPAxVJ7fhrVmFEqyrcZv87GKQgrewNkmpWx/S7ZbuKFM
        3EQJ1IFMOUTzcjan6yg8CIV2dIkjwmc5hLKtjbqEEfHjssrwqZA5juHoTDWPjUeHqpxv/4kiRCwKAp5N
        vrbMe8yPOXHSwby739OEPvSP7LPPvwG4m51zH3ZhAgAAAABJRU5ErkJggg==
</value>
  </data>
</root>